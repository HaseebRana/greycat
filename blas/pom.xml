<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 DataThings - All rights reserved.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>greycat-blas</artifactId>
    <version>11-SNAPSHOT</version>
    <name>greycat-blas</name>

    <properties>
        <js.name>greycat.blas</js.name>
        <header.path>${basedir}/../LICENSE</header.path>
    </properties>

    <parent>
        <artifactId>greycat-parent</artifactId>
        <groupId>com.datathings.enterprise</groupId>
        <version>10-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>

    <dependencies>
        <dependency>
            <!-- WORKAROUND: https://github.com/sbt/sbt/issues/861 -->
            <groupId>net.sourceforge.f2j</groupId>
            <artifactId>arpack_combined_all</artifactId>
            <version>0.1</version>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>core</artifactId>
            <version>1.1.2</version>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_ref-osx-x86_64</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_ref-linux-x86_64</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_ref-linux-i686</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_ref-win-x86_64</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_ref-win-i686</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_ref-linux-armhf</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_system-osx-x86_64</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_system-linux-x86_64</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_system-linux-i686</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_system-linux-armhf</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_system-win-x86_64</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.github.fommil.netlib</groupId>
            <artifactId>netlib-native_system-win-i686</artifactId>
            <version>1.1</version>
            <classifier>natives</classifier>
        </dependency>
        <dependency>
            <groupId>com.datathings.enterprise</groupId>
            <artifactId>greycat</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>com.datathings</groupId>
            <artifactId>greycat</artifactId>
            <version>${greycat.version}</version>
        </dependency>
        <dependency>
            <groupId>com.datathings</groupId>
            <artifactId>greycat-ml</artifactId>
            <version>${greycat.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.datathings</groupId>
                <artifactId>j2ts-mavenplugin</artifactId>
                <version>${java2typescript.plugin.version}</version>
                <executions>
                    <execution>
                        <id>ts-compile-ml</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>java2ts</goal>
                        </goals>
                        <configuration>
                            <name>${js.name}</name>
                            <headers>
                                <header>import {java,Long} from 'j2ts-jre';</header>
                                <header>import * as greycat from 'greycat';</header>
                                <header>declare function require(name:string);</header>
                            </headers>
                            <source>${basedir}/src/main/java</source>
                            <target>${basedir}/target/generated-sources</target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>ts-compile-test-ml</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>java2ts</goal>
                        </goals>
                        <configuration>
                            <name>test</name>
                            <headers>
                                <header>import {java,Long} from 'j2ts-jre';</header>
                                <header>import {org} from 'j2ts-junit';</header>
                                <header>import * as greycat from 'greycat';</header>
                                <header>import {greycatBlas} from '../classes-npm';</header>
                            </headers>
                            <testHeaders>
                                <testHeader>var greycatBlasTest = require('../test-classes-npm');</testHeader>
                            </testHeaders>
                            <source>${basedir}/src/test/java</source>
                            <target>${basedir}/target/generated-test-sources</target>
                            <withJUnit>true</withJUnit>
                        </configuration>
                    </execution>
                </executions>
            </plugin>






            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <version>2.0</version>
                <executions>
                    <execution>
                        <id>main.ts.compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                def ant = new AntBuilder()
                                ant.copy(file: "${basedir}/src/main/ts/tsconfig.json", todir: "${basedir}/target/classes-npm")
                                ant.copy(file: "${basedir}/src/main/ts/package.json", todir: "${basedir}/target/classes-npm")
                                ant.copy(file: "${basedir}/src/main/ts/readme.md", todir: "${basedir}/target/classes-npm")
                                ant.copy(file: "${basedir}/target/generated-sources/greycat.blas.ts", todir: "${basedir}/target/classes-npm")
                                ant.replace(file: "${basedir}/target/classes-npm/greycat.blas.ts", token: "namespace greycat", value:"export namespace greycatBlas")
                                ant.replace(file: "${basedir}/target/classes-npm/greycat.blas.ts", token: "greycat.blas", value:"greycatBlas.blas")
                                def project_version = "${greycat.version}".replaceAll("-SNAPSHOT", "")
                                while (project_version.split('\\.').length != 3) {
                                    project_version += '.0'
                                }
                                def j2ts_version = "${java2typescript.plugin.version}".replaceAll("-SNAPSHOT", "")
                                while (j2ts_version.split('\\.').length != 3) {
                                    j2ts_version += '.0'
                                }
                                ant.replace(file: "${basedir}/target/classes-npm/package.json", token: "GREYCAT_VERSION", value: project_version)
                                ant.replace(file: "${basedir}/target/classes-npm/package.json", token: "J2TS_VERSION", value: j2ts_version)

                                def npmLinkGreycat = "npm install ${greycat.path}/greycat/target/classes-npm".execute(null, new File("${basedir}/target/classes-npm"))
                                npmLinkGreycat.waitForProcessOutput(System.out, System.err)
                                if (npmLinkGreycat.exitValue() != 0) {
                                    exit
                                }
                                ant.echo("NPM JRE")
                                def npmInstallJreProcess = "npm install j2ts-jre".execute(null, new File("${basedir}/target/classes-npm"))
                                npmInstallJreProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallJreProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.echo("NPM Install")
                                def npmInstallProcess = "npm install".execute(null, new File("${basedir}/target/classes-npm"))
                                npmInstallProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.copy(file: "${basedir}/build_netlib/netlib.js", todir: "${basedir}/target/classes-npm")
                                ant.echo("TypeScript Compiler")
                                def tscProcess = "node ${basedir}/target/classes-npm/node_modules/typescript/lib/tsc.js".execute(null, new File("${basedir}/target/classes-npm"))
                                tscProcess.waitForProcessOutput(System.out, System.err)
                                if (tscProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.delete(file: "${basedir}/target/classes-npm/greycat.blas.ts")
                                def npmLink = "npm link".execute(null, new File("${basedir}/target/classes-npm"))
                                npmLink.waitForProcessOutput(System.out, System.err)
                                if (npmLink.exitValue() != 0) {
                                    exit
                                }

                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test.ts.compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                def ant = new AntBuilder()
                                ant.copy(file: "${basedir}/src/test/ts/tsconfig.json", todir: "${basedir}/target/test-classes-npm")
                                ant.copy(file: "${basedir}/src/test/ts/package.json", todir: "${basedir}/target/test-classes-npm")
                                def project_version = "${project.version}".replaceAll("-SNAPSHOT", "")
                                while (project_version.split('\\.').length != 3) {
                                    project_version += '.0'
                                }
                                def j2ts_version = "${java2typescript.plugin.version}".replaceAll("-SNAPSHOT", "")
                                while (j2ts_version.split('\\.').length != 3) {
                                    j2ts_version += '.0'
                                }
                                ant.replace(file: "${basedir}/target/test-classes-npm/package.json", token: "GREYCAT_VERSION", value: project_version)
                                ant.replace(file: "${basedir}/target/test-classes-npm/package.json", token: "J2TS_VERSION", value: j2ts_version)
                                ant.copy(file: "${basedir}/target/generated-test-sources/test.ts", todir: "${basedir}/target/test-classes-npm")
                                ant.concat(append: "true", destfile: "${basedir}/target/test-classes-npm/test.ts", "export = greycatBlasTest;")
                                ant.replace(file: "${basedir}/target/test-classes-npm/test.ts", token: "greycat.blas", value: "greycatBlas.blas")
                                ant.echo("NPM JRE")
                                def npmInstallJreProcess = "npm install j2ts-jre".execute(null, new File("${basedir}/target/test-classes-npm"))
                                npmInstallJreProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallJreProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.echo("NPM Junit")
                                def npmInstallJunitProcess = "npm install j2ts-junit".execute(null, new File("${basedir}/target/test-classes-npm"))
                                npmInstallJunitProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallJunitProcess.exitValue() != 0) {
                                    exit
                                }
                                def npmLinkGreycat = "npm install ${greycat.path}/greycat/target/classes-npm".execute(null, new File("${basedir}/target/test-classes-npm"))
                                npmLinkGreycat.waitForProcessOutput(System.out, System.err)
                                if (npmLinkGreycat.exitValue() != 0) {
                                    exit
                                }
                                def npmInstallJasmine = "npm install jasmine".execute(null, new File("${basedir}/target/test-classes-npm"))
                                npmInstallJasmine.waitForProcessOutput(System.out, System.err)
                                if (npmInstallJasmine.exitValue() != 0) {
                                    exit
                                }
                                def npmInstallProcess = "npm install".execute(null, new File("${basedir}/target/test-classes-npm"))
                                npmInstallProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcess.exitValue() != 0) {
                                    exit
                                }
                                def tscProcess = "node ${basedir}/target/test-classes-npm/node_modules/typescript/lib/tsc.js".execute(null, new File("${basedir}/target/test-classes-npm"))
                                tscProcess.waitForProcessOutput(System.out, System.err)
                                if (tscProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.copy(file: "${basedir}/target/generated-test-sources/testsRunner.js", todir: "${basedir}/target/test-classes-npm")
                                ant.concat(append: "false", destfile: "${basedir}/target/test-classes-npm/jasmine.js", "var Jasmine = require('jasmine');var jasmine = new Jasmine();jasmine.execute(['testsRunner.js']);")
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test.ts.run</id>
                        <phase>test</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                def jasmineProcess = "node jasmine.js".execute(null, new File("${basedir}/target/test-classes-npm"))
                                jasmineProcess.waitForProcessOutput(System.out, System.err)
                                if (jasmineProcess.exitValue() != 0) {
                                    exit
                                }
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>
